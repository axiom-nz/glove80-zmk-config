
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Homerow_Mods 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Cursor 3
#define LAYER_GE_Symbol 4
#define LAYER_GE_Number 5
#define LAYER_Miryoku_Numbers 6
#define LAYER_Miryoku_Symbols 7
#define LAYER_OG_Symbols 8

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {

};

/* Automatically generated macro definitions */
/ {
    macros {

        // Cursor Layer - Copy (Cmd C) - TailorKey
        cur_COPY_v1_TKZ: cur_COPY_v1_TKZ {
            label = "&CUR_COPY_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>;
        };

        // Cursor Layer - Cut (Cmd X) - TailorKey
        cur_CUT_v1_TKZ: cur_CUT_v1_TKZ {
            label = "&CUR_CUT_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X)>;
        };

        // Cursor Layer - Extent Line (seq) - TailorKey
        cur_EXTEND_LINE_v1_TKZ: cur_EXTEND_LINE_v1_TKZ {
            label = "&CUR_EXTEND_LINE_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LS(END)>;
        };

        // Cursor Layer - Extend Word (seq) - TailorKey
        cur_EXTEND_WORD_v1_TKZ: cur_EXTEND_WORD_v1_TKZ {
            label = "&CUR_EXTEND_WORD_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LA(LS(RIGHT))>;
        };

        // Cursor Layer - Find (Cmd F) - TailorKey
        cur_FIND_v1_TKZ: cur_FIND_v1_TKZ {
            label = "&CUR_FIND_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(F)>;
        };

        // Cursor Layer - Find Next (Cmd G) - TailorKey
        cur_FNEXT_v1_TKZ: cur_FNEXT_v1_TKZ {
            label = "&CUR_FNEXT_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(G)>;
        };

        // Cursor Layer - Find Prev (Cmd Shift G) - TailorKey
        cur_FPREV_v1_TKZ: cur_FPREV_v1_TKZ {
            label = "&CUR_FPREV_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(G))>;
        };

        // Cursor Layer - Paste (Cmd V) - TailorKey
        cur_PASTE_v1_TKZ: cur_PASTE_v1_TKZ {
            label = "&CUR_PASTE_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>;
        };

        // Cursor Layer - Redo (Cmd Y) - TailorKey
        cur_REDO_v1_TKZ: cur_REDO_v1_TKZ {
            label = "&CUR_REDO_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Y)>;
        };

        // Cursor Layer - Selest All (Cmd A) - TailorKey
        cur_SELECT_ALL_v1_TKZ: cur_SELECT_ALL_v1_TKZ {
            label = "&CUR_SELECT_ALL_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A)>;
        };

        // Cursor Layer - Select Line (seq) - TailorKey
        cur_SELECT_LINE_v1_TKZ: cur_SELECT_LINE_v1_TKZ {
            label = "&CUR_SELECT_LINE_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp HOME>
                , <&kp LS(END)>;
        };

        // Cursor Layer - Select None (seq) - TailorKey
        cur_SELECT_NONE_v1_TKZ: cur_SELECT_NONE_v1_TKZ {
            label = "&CUR_SELECT_NONE_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp DOWN>
                , <&kp UP>
                , <&kp RIGHT>
                , <&kp LEFT>;
        };

        // Cursor Layer - Select Word (seq) - TailorKey
        cur_SELECT_WORD_v1_TKZ: cur_SELECT_WORD_v1_TKZ {
            label = "&CUR_SELECT_WORD_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LA(LEFT)>
                , <&kp LA(LS(RIGHT))>;
        };

        // Cursor Layer - Undo (Cmd Z) - TailorKey
        cur_UNDO_v1_TKZ: cur_UNDO_v1_TKZ {
            label = "&CUR_UNDO_V1_TKZ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>;
        };

        // mod_tab_switcher_chord -  TailorKey
        mod_tab_chord_v1_TKZ: mod_tab_chord_v1_TKZ {
            label = "&MOD_TAB_CHORD_V1_TKZ";
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_press>
                , <&macro_param_2to1>
                , <&mo 0>
                , <&macro_press>
                , <&macro_param_1to1>
                , <&mod_tab_v1_TKZ N0>
                , <&macro_pause_for_release>
                , <&macro_release>
                , <&macro_param_1to1>
                , <&mod_tab_v1_TKZ N0>
                , <&macro_release>
                , <&macro_param_2to1>
                , <&mo 0>;
        };

        // mod_tab_switcher - TailorKey
        //
        //
        mod_tab_v1_TKZ: mod_tab_v1_TKZ {
            label = "&MOD_TAB_V1_TKZ";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_press>
                , <&macro_param_1to1>
                , <&kp N0>
                , <&macro_tap>
                , <&kp TAB>
                , <&macro_pause_for_release>
                , <&macro_release>
                , <&macro_param_1to1>
                , <&kp N0>;
        };

        // Lambda Operator (=>)
        op_lambda: op_lambda {
            label = "&OP_LAMBDA";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <5>;
            bindings = <&kp EQUAL>
                , <&kp GT>;
        };

        // Lambda Operator (->)
        op_arrow: op_arrow {
            label = "&OP_ARROW";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <5>;
            bindings = <&kp MINUS>
                , <&kp GT>;
        };
    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {

        // Short duration mod-tap for undo, copy & paste with one hold
        EditHoldTap: EditHoldTap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <75>;
        };

        // Homerow Mod for the left index finger - TailorKey
        HRM_left_index_v1_TKZ: HRM_left_index_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 52 53 54 70 71 69>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left middle finger - TailorKey
        HRM_left_middy_v1_TKZ: HRM_left_middy_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left pinky - TailorKey
        HRM_left_pinky_v1_TKZ: HRM_left_pinky_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 9 16 17 18 19 20 21 29 30 31 32 33 42 43 44 45 60 61 62 63 28 40 41 58 59 75 76 77 79 78 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left ring finger 1 - TailorKey
        HRM_left_ring1_v1_TKZ: HRM_left_ring1_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 52 53 54 69 70 71>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the left ring finger 2 - TailorKey
        HRM_left_ring2_v1_TKZ: HRM_left_ring2_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <57 56 55 72 73 74 5 6 7 8 16 17 18 19 20 28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 9 21 33 45 63 79 53 54 69 70 71 52>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right index finger - TailorKey
        HRM_right_index_v1_TKZ: HRM_right_index_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right middle finger - TailorKey
        HRM_right_middy_v1_TKZ: HRM_right_middy_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right pinky - TailorKey
        HRM_right_pinky_v1_TKZ: HRM_right_pinky_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right ring 1 - TailorKey
        //
        HRM_right_ring1_v1_TKZ: HRM_right_ring1_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        // Homerow Mod for the right ring 2 - TailorKey
        HRM_right_ring2_v1_TKZ: HRM_right_ring2_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <52 53 54 71 70 69 0 1 10 11 12 13 14 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 15 4 2 3 55 56 57 72 73 74>;
            hold-trigger-on-release;
        };

        // space_layer_access - TailorKey
        space_v1_TKZ: space_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
        };

        // thumb_layer_access - TailorKey
        thumb_v1_TKZ: thumb_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
        };
    };
};

/* Automatically generated combos definitions */
/ {
    combos {
        compatible = "zmk,combos";

        // capslock when pressing both T1's - TailorKey
        combo_capslock_v1_TKZ {
            key-positions = <52 57>;
            bindings = <&kp CAPS>;
        };

        // capsword on LH_T1 and LH_C2R4 - TailorKey
        combo_capsword_left_v1_TKZ {
            timeout-ms = <50>;
            key-positions = <38 52>;
            bindings = <&caps_word>;
        };

        // capsword on RH_T1 and RH_C2R4 - TailorKey
        combo_capsword_right_v1_TKZ {
            timeout-ms = <50>;
            key-positions = <57 41>;
            bindings = <&caps_word>;
        };

        // F11 on RH_C5 and RH_R1+R2 - TailorKey
        combo_F11_v1_TKZ {
            key-positions = <8 20>;
            bindings = <&kp F11>;
        };

        // F12 on RH_C6 and RH_R1+R2 - TailorKey
        combo_F12_v1_TKZ {
            key-positions = <9 21>;
            bindings = <&kp F12>;
        };

        // sticky "hyper" modifiers (Alt + Ctrl + Shift) - TailorKey
        combo_sticky_hyp_rght_v1_TKZ {
            timeout-ms = <50>;
            key-positions = <74 57>;
            bindings = <&sk LG(LA(LC(LSHFT)))>;
        };

        // sticky "meh" modifiers (Alt + Ctrl + Shift) - TailorKey
        combo_sticky_meh_rght_v1_TKZ {
            timeout-ms = <50>;
            key-positions = <73 74>;
            bindings = <&sk LA(LC(LSHFT))>;
        };

        // Calls macro tab_switcher_ctrl_combo on Left T4/T5 - TailorKey
        combo_ctrl_tab_switch_v1_TKZ {
            timeout-ms = <51>;
            key-positions = <69 70>;
            bindings = <&mod_tab_chord_v1_TKZ LCTRL 3>;
        };

        // Calls macro tab_switcher_gui_combo on Left T1/T4 - TailorKey
        combo_alt_tab_switch_v1_TKZ {
            key-positions = <69 52>;
            bindings = <&mod_tab_chord_v1_TKZ LALT 3>;
        };
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Homerow_Mods {
            bindings = <
               &kp F1                          &kp F2                         &kp F3                         &kp F4                          &kp F5                                                                                                                                                        &kp F6                          &kp F7                          &kp F8                           &kp F9    &kp F10
            &kp EQUAL                          &kp N1                         &kp N2                         &kp N3                          &kp N4                    &kp N5                                                                                             &kp N6                           &kp N7                          &kp N8                          &kp N9                           &kp N0  &kp MINUS
              &kp TAB                           &kp Q  &HRM_left_ring2_v1_TKZ RALT W                          &kp F                           &kp P                     &kp B                                                                                              &kp J                            &kp L                           &kp U  &HRM_right_ring2_v1_TKZ RALT Y                          &kp SQT   &kp BSLH
              &kp ESC  &HRM_left_pinky_v1_TKZ LCTRL A  &HRM_left_ring1_v1_TKZ LALT R  &HRM_left_middy_v1_TKZ LGUI S  &HRM_left_index_v1_TKZ LSHFT T                     &kp G                                                                                              &kp M  &HRM_right_index_v1_TKZ LSHFT N  &HRM_right_middy_v1_TKZ LGUI E  &HRM_right_ring1_v1_TKZ LALT I  &HRM_right_pinky_v1_TKZ LCTRL O   &kp SEMI
            &kp GRAVE            &EditHoldTap LG(Z) Z           &EditHoldTap LG(X) X           &EditHoldTap LG(C) C            &EditHoldTap LG(V) D  &EditHoldTap LS(LG(Z)) V   &thumb_v1_TKZ 5 ESC                &none  &lower   &none    &none    &thumb_v1_TKZ 8 RET   &kp K                            &kp H                       &kp COMMA                         &kp DOT                         &kp FSLH  &kp PG_UP
 &magic LAYER_Magic 0                        &kp HOME                        &kp END                       &kp LEFT                       &kp RIGHT                            &thumb_v1_TKZ 3 BSPC  &thumb_v1_TKZ 8 DEL   &none   &none  &kp TAB  &space_v1_TKZ 6 SPACE                                   &kp UP                        &kp DOWN                        &kp LBKT                         &kp RBKT  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
               &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
               &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
               &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
               &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
 &magic LAYER_Magic 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans   &to 4                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
       &none            &none            &none            &none            &none                                                                                  &none   &none   &none  &bt BT_CLR  &bt BT_CLR_ALL
       &to 0            &to 1            &to 2            &to 3            &to 4            &none                                                         &none   &none   &none   &none       &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none       &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none       &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none       &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none       &none           &none
            >;
        };

        layer_Cursor {
            bindings = <
                &none                   &none                    &none                    &none              &none                                                                                                                                                                                      &none              &none              &none      &none        &none
              &kp ESC                 &kp RET                &kp SPACE                  &kp TAB            &kp DEL            &kp INS                                                                                                                                               &kp INS           &kp DEL            &kp TAB          &kp SPACE    &kp RET      &kp ESC
            &kp LC(E)               &sk LSHFT         &cur_REDO_v1_TKZ         &cur_UNDO_v1_TKZ           &kp BSPC    &cur_CUT_v1_TKZ                                                                                                                                       &cur_CUT_v1_TKZ          &kp BSPC   &cur_UNDO_v1_TKZ   &cur_REDO_v1_TKZ  &sk LSHFT    &kp LC(K)
            &kp LC(L)                &kp LGUI                 &kp LALT                &kp LCTRL          &kp LSHFT   &cur_COPY_v1_TKZ                                                                                                                                      &cur_COPY_v1_TKZ          &kp LEFT             &kp UP           &kp DOWN  &kp RIGHT    &kp LC(L)
            &kp LC(J)  &cur_SELECT_ALL_v1_TKZ  &cur_SELECT_LINE_v1_TKZ  &cur_SELECT_WORD_v1_TKZ   &cur_FIND_v1_TKZ  &cur_PASTE_v1_TKZ  &mod_tab_v1_TKZ LALT   &mod_tab_v1_TKZ LGUI  &kp PSCRN  &cur_SELECT_NONE_v1_TKZ  &cur_EXTEND_LINE_v1_TKZ  &cur_EXTEND_WORD_v1_TKZ  &cur_PASTE_v1_TKZ          &kp HOME          &kp PG_UP          &kp PG_DN    &kp END    &kp LC(J)
 &magic LAYER_Magic 0       &cur_FPREV_v1_TKZ  &cur_EXTEND_LINE_v1_TKZ  &cur_EXTEND_WORD_v1_TKZ  &cur_FNEXT_v1_TKZ                                    &none  &mod_tab_v1_TKZ LCTRL  &kp LG(D)   &cur_SELECT_ALL_v1_TKZ  &cur_SELECT_LINE_v1_TKZ  &cur_SELECT_WORD_v1_TKZ                     &cur_FIND_v1_TKZ  &cur_FPREV_v1_TKZ  &cur_FNEXT_v1_TKZ  &kp LC(H)  &kp LG(DOT)
            >;
        };

        layer_GE_Symbol {
            bindings = <
     &none      &none      &none      &none     &none                                                                                   &none        &none      &none     &none   &none
     &none  &kp GRAVE   &kp LPAR   &kp RPAR  &kp SEMI  &kp COMMA                                                             &none      &none        &none      &none     &none   &none
  &kp EXCL   &kp LBRC    &kp SQT    &kp DQT  &kp RBRC  &kp QMARK                                                          &kp SEMI  &kp RSHFT    &kp RCTRL   &kp RALT  &kp RGUI   &none
  &kp HASH  &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR   &kp STAR                                                           &kp DOT   &kp BSPC      &kp TAB  &kp SPACE   &kp RET   &none
 &kp TILDE     &kp LT   &kp PIPE  &kp MINUS    &kp GT   &kp FSLH   &kp BSLH    &kp DOT  &kp STAR   &none   &none   &none  &kp FSLH    &kp DEL  &kp LS(TAB)      &none     &none   &none
    &kp AT   &kp AMPS   &kp LBKT   &kp RBKT  &kp PLUS             &kp PRCNT  &kp COLON  &kp SEMI   &to 0   &none   &none               &trans       &trans     &trans    &trans   &none
            >;
        };

        layer_GE_Number {
            bindings = <
      &none      &none                    &none                    &none      &none                                                                                 &none     &none     &none      &none      &none
    &kp ESC    &kp RET                &kp SPACE                  &kp TAB    &kp DEL  &kp INS                                                         &kp TILDE  &kp CARET  &kp HASH  &kp DLLR   &kp EXCL   &kp PIPE
      &none  &sk LSHFT            &kp LS(LG(Z))                &kp LG(Z)   &kp BSPC    &kp A                                                         &kp PRCNT     &kp N7    &kp N8    &kp N9  &kp COLON      &kp K
 &kp KP_NUM  &kp LCTRL                 &kp LALT                 &kp LGUI  &kp LSHFT    &kp B                                                          &kp PLUS     &kp N4    &kp N5    &kp N6  &kp MINUS      &kp J
      &none  &kp LG(A)  &cur_SELECT_LINE_v1_TKZ  &cur_SELECT_WORD_v1_TKZ  &kp UNDER    &kp C   &kp D   &kp E   &kp F     &kp LT   &kp GT  &kp EQUAL   &kp STAR     &kp N1    &kp N2    &kp N3   &kp FSLH  &kp LS(G)
      &none      &none  &cur_EXTEND_LINE_v1_TKZ  &cur_EXTEND_WORD_v1_TKZ      &kp X            &none   &none   &none  &kp COMMA  &kp DOT     &kp N0                &trans    &trans    &trans     &trans     &kp AT
            >;
        };

        layer_Miryoku_Numbers {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT   &kp C_PP                                                                                        &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
               &trans     &kp PRCNT    &kp DLLR    &kp EXCL  &kp COLON     &trans                                                       &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
               &trans      &kp LBKT      &kp N7      &kp N8     &kp N9   &kp RBKT                                                      &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
               &trans      &kp SEMI      &kp N4      &kp N5     &kp N6  &kp EQUAL                                                                &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
               &trans     &kp GRAVE      &kp N1      &kp N2     &kp N3   &kp BSLH  &kp DOT     &trans  &trans  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
 &magic LAYER_Magic 0        &trans      &trans      &trans     &trans              &kp N0  &kp MINUS  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Miryoku_Symbols {
            bindings = <
 &trans     &trans    &trans     &trans     &trans                                                                         &trans  &trans  &trans  &trans  &trans
 &trans     &trans    &trans     &trans     &trans    &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
 &trans   &kp LBRC  &kp AMPS   &kp STAR   &kp LPAR  &kp RBRC                                                       &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp COLON  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS                                                       &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp TILDE  &kp EXCL     &kp AT   &kp HASH  &kp PIPE  &kp UNDER    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans     &trans    &trans     &trans     &trans             &kp LPAR  &kp RPAR   &none  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_OG_Symbols {
            bindings = <
 &trans     &trans     &trans    &trans    &trans                                                                               &trans    &trans    &trans    &trans   &trans
 &trans     &trans     &trans    &trans    &trans     &trans                                                         &trans     &trans    &kp LT    &kp GT    &trans   &trans
 &trans   &kp EXCL   &kp HASH  &kp LBRC  &kp RBRC  &kp TILDE                                                         &kp AT  &kp UNDER  &kp LPAR  &kp RPAR  &kp BSLH   &trans
 &trans   &kp SEMI   &kp AMPS  &kp LPAR  &kp RPAR   &kp DLLR                                                      &kp MINUS  &kp EQUAL  &kp LBRC  &kp RBRC   &kp DQT  &kp SQT
 &trans  &kp CARET  &kp PRCNT  &kp LBKT  &kp RBKT   &kp PIPE  &trans  &trans  &trans  &trans  &trans  &op_lambda   &kp PIPE   &kp PLUS  &kp LBKT  &kp RBKT  &kp FSLH   &trans
 &trans     &trans     &trans    &trans    &trans             &trans  &trans  &trans  &trans  &trans   &op_arrow              &kp STAR    &trans    &trans    &trans   &trans
            >;
        };

    };
};
